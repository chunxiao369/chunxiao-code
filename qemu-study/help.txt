QEMU PC emulator version 0.12.3, Copyright (c) 2003-2008 Fabrice Bellard
usage: qemu [options] [disk_image]

'disk_image' is a raw hard image image for IDE hard disk 0

Standard options:
-h or -help     display this help and exit
-version        display version information and exit
-M machine      select emulated machine (-M ? for list)
-cpu cpu        select CPU (-cpu ? for list)
-smp n[,maxcpus=cpus][,cores=cores][,threads=threads][,sockets=sockets]
                set the number of CPUs to 'n' [default=1]
                maxcpus= maximum number of total cpus, including
                  offline CPUs for hotplug etc.
                cores= number of CPU cores on one socket
                threads= number of threads on one CPU core
                sockets= number of discrete sockets in the system
-numa node[,mem=size][,cpus=cpu[-cpu]][,nodeid=node]
-fda/-fdb file  use 'file' as floppy disk 0/1 image
-hda/-hdb file  use 'file' as IDE hard disk 0/1 image
-hdc/-hdd file  use 'file' as IDE hard disk 2/3 image
-cdrom file     use 'file' as IDE cdrom image (cdrom is ide1 master)
-drive [file=file][,if=type][,bus=n][,unit=m][,media=d][,index=i]
       [,cyls=c,heads=h,secs=s[,trans=t]][,snapshot=on|off]
       [,cache=writethrough|writeback|none][,format=f][,serial=s]
       [,addr=A][,id=name][,aio=threads|native]
                use 'file' as a drive image
-set group.id.arg=value
                set <arg> parameter for item <id> of type <group>
                i.e. -set drive.$id.file=/path/to/image
-global driver.property=value
                set a global default for a driver property
-mtdblock file  use 'file' as on-board Flash memory image
-sd file        use 'file' as SecureDigital card image
-pflash file    use 'file' as a parallel flash image
-boot [order=drives][,once=drives][,menu=on|off]
                'drives': floppy (a), hard disk (c), CD-ROM (d), network (n)
-snapshot       write to temporary files instead of disk image files
-m megs         set virtual RAM size to megs MB [default=128]
-k language     use keyboard layout (for example 'fr' for French)
-audio-help     print list of audio drivers and their options
-soundhw c1,... enable audio support
                and only specified sound cards (comma separated list)
                use -soundhw ? to get the list of supported cards
                use -soundhw all to enable all of them
-usb            enable the USB driver (will be the default soon)
-usbdevice name add the host or guest USB device 'name'
-device driver[,options]  add device
-name string1[,process=string2]    set the name of the guest
            string1 sets the window title and string2 the process name (on Linux)
-uuid %08x-%04x-%04x-%04x-%012x
                specify machine UUID

Display options:
-nographic      disable graphical output and redirect serial I/Os to console
-curses         use a curses/ncurses interface instead of SDL
-portrait       rotate graphical output 90 deg left (only PXA LCD)
-vga [std|cirrus|vmware|xenfb|none]
                select video card type
-full-screen    start in full screen
-vnc display    start a VNC server on display

1 target only:
-win2k-hack     use it when installing Windows 2000 to avoid a disk full bug
-no-fd-bootchk  disable boot signature checking for floppy disks
-no-acpi        disable ACPI
-no-hpet        disable HPET
-balloon none   disable balloon device
-balloon virtio[,addr=str]
                enable virtio balloon device (default)
-acpitable [sig=str][,rev=n][,oem_id=str][,oem_table_id=str][,oem_rev=n][,asl_compiler_id=str][,asl_compiler_rev=n][,data=file1[:file2]...]
                ACPI table description
-smbios file=binary
                Load SMBIOS entry from binary file
-smbios type=0[,vendor=str][,version=str][,date=str][,release=%d.%d]
                Specify SMBIOS type 0 fields
-smbios type=1[,manufacturer=str][,product=str][,version=str][,serial=str]
              [,uuid=uuid][,sku=str][,family=str]
                Specify SMBIOS type 1 fields

Network options:
-net nic[,vlan=n][,macaddr=mac][,model=type][,name=str][,addr=str][,vectors=v]
                create a new Network Interface Card and connect it to VLAN 'n'
-net user[,vlan=n][,name=str][,net=addr[/mask]][,host=addr][,restrict=y|n]
         [,hostname=host][,dhcpstart=addr][,dns=addr][,tftp=dir][,bootfile=f]
         [,hostfwd=rule][,guestfwd=rule][,smb=dir[,smbserver=addr]]
                connect the user mode network stack to VLAN 'n', configure its
                DHCP server and enabled optional services
-net tap[,vlan=n][,name=str][,fd=h][,ifname=name][,script=file][,downscript=dfile][,sndbuf=nbytes][,vnet_hdr=on|off]
                connect the host TAP network interface to VLAN 'n' and use the
                network scripts 'file' (default=/etc/qemu-ifup)
                and 'dfile' (default=/etc/qemu-ifdown);
                use '[down]script=no' to disable script execution;
                use 'fd=h' to connect to an already opened TAP interface
                use 'sndbuf=nbytes' to limit the size of the send buffer; the
                default of 'sndbuf=1048576' can be disabled using 'sndbuf=0'
                use vnet_hdr=off to avoid enabling the IFF_VNET_HDR tap flag; use
                vnet_hdr=on to make the lack of IFF_VNET_HDR support an error condition
-net socket[,vlan=n][,name=str][,fd=h][,listen=[host]:port][,connect=host:port]
                connect the vlan 'n' to another VLAN using a socket connection
-net socket[,vlan=n][,name=str][,fd=h][,mcast=maddr:port]
                connect the vlan 'n' to multicast maddr and port
-net dump[,vlan=n][,file=f][,len=n]
                dump traffic on vlan 'n' to file 'f' (max n bytes per packet)
-net none       use it alone to have zero network devices; if no -net option
                is provided, the default is '-net nic -net user'
-netdev [user|tap|socket],id=str[,option][,option][,...]

Character device options:
-chardev null,id=id
-chardev socket,id=id[,host=host],port=host[,to=to][,ipv4][,ipv6][,nodelay]
         [,server][,nowait][,telnet] (tcp)
-chardev socket,id=id,path=path[,server][,nowait][,telnet] (unix)
-chardev udp,id=id[,host=host],port=port[,localaddr=localaddr]
         [,localport=localport][,ipv4][,ipv6]
-chardev msmouse,id=id
-chardev vc,id=id[[,width=width][,height=height]][[,cols=cols][,rows=rows]]
-chardev file,id=id,path=path
-chardev pipe,id=id,path=path
-chardev pty,id=id
-chardev stdio,id=id
-chardev tty,id=id,path=path
-chardev parport,id=id,path=path

Bluetooth(R) options:
-bt hci,null    dumb bluetooth HCI - doesn't respond to commands
-bt hci,host[:id]
                use host's HCI with the given name
-bt hci[,vlan=n]
                emulate a standard HCI in virtual scatternet 'n'
-bt vhci[,vlan=n]
                add host computer to virtual scatternet 'n' using VHCI
-bt device:dev[,vlan=n]
                emulate a bluetooth device 'dev' in scatternet 'n'

Linux/Multiboot boot specific:
-kernel bzImage use 'bzImage' as kernel image
-append cmdline use 'cmdline' as kernel command line
-initrd file    use 'file' as initial ram disk

Debug/Expert options:
-serial dev     redirect the serial port to char device 'dev'
-parallel dev   redirect the parallel port to char device 'dev'
-monitor dev    redirect the monitor to char device 'dev'
-qmp dev        like -monitor but opens in 'control' mode.
-mon chardev=[name][,mode=readline|control][,default]
-pidfile file   write PID to 'file'
-singlestep   always run in singlestep mode
-S              freeze CPU at startup (use 'c' to start execution)
-gdb dev        wait for gdb connection on 'dev'
-s              shorthand for -gdb tcp::1234
-d item1,...    output log to /tmp/qemu.log (use -d ? for a list of log items)
-hdachs c,h,s[,t]
                force hard disk 0 physical geometry and the optional BIOS
                translation (t=none or lba) (usually qemu can guess them)
-L path         set the directory for the BIOS, VGA BIOS and keymaps
-bios file      set the filename for the BIOS
-no-reboot      exit instead of rebooting
-no-shutdown    stop before shutdown
-loadvm [tag|id]
                start right away with a saved state (loadvm in monitor)
-daemonize      daemonize QEMU after initializing
-option-rom rom load a file, rom, into the option ROM space
-clock          force the use of the given methods for timer alarm.
                To see what timers are available use -clock ?
-rtc [base=utc|localtime|date][,clock=host|vm][,driftfix=none|slew]
                set the RTC base and clock, enable drift fix for clock ticks
-icount [N|auto]
                enable virtual instruction counter with 2^N clock ticks per
                instruction
-watchdog i6300esb|ib700
                enable virtual hardware watchdog [default=none]
-watchdog-action reset|shutdown|poweroff|pause|debug|none
                action when watchdog fires [default=reset]
-echr chr       set terminal escape character instead of ctrl-a
-virtioconsole c
                set virtio console
-show-cursor    show cursor
-tb-size n      set TB size
-incoming p     prepare for incoming migration, listen on port p
-nodefaults     don't create default devices.
-chroot dir     Chroot to dir just before starting the VM.
-runas user     Change to user id user just before starting the VM.
-readconfig <file>
-writeconfig <file>
                read/write config file

During emulation, the following keys are useful:
ctrl-alt-f      toggle full screen
ctrl-alt-n      switch to virtual console 'n'
ctrl-alt        toggle mouse and keyboard grab

When using -nographic, press 'ctrl-a h' to get some help.







1、环境说明
BOOK：CLFS-1.0.0-ppc.pdf
目标机：QEMU  0.10.2，qemu-system-ppc

2、构建过程的问题和解决办法 
（1）第126页 7.14节，编译命令有误，应为
${CC}  -o  ......
（2）第127页 7.15节，更改Makefile 的命令有误，应为
cp -v Makefile{,.orig}
（3）编译mktemp-1.5软件包时，configure命令执行出错，提示
check for EBCDIC ...  configure:  error: cannot run test program while cross
compiling.
解决方法：忽略，在目标机上再重新编译。

3、内核配置
内核对32位powerpc有一个缺省配置——pmac32_defconfig，我们可以先用它配置内核：
make ARCH=powerpc CROSS_COMPILE=${CLFS_TARGET}-  pmac32_defconfig
然后再执行
make ARCH=powerpc CROSS_COMPILE=${CLFS_TARGET}-  menuconfig
命令，增加 cmd64x 磁盘控制器驱动的配置项：
Device Drivers --> ATA/ATAPI/MFM/RLL support --> CMD64{3|6|8|9} chipset
support
即可配置好满足QEMU的powerpc虚拟机要求的内核

上面的配置方法虽然简单有效，但冗余配置项太多，编译时间较长。我们也可以从CLFS的最简配置入手（参考：http://linuxman.blog.ccidnet.com/blog-htm-do-showone-uid-60710-type-blog-itemid-293122.html），增加powerpc特有的配置项，配置一个“刚好够用”的内核。
适合QEMU的powerpc虚拟机要求的关键内核配置项：
(1) Platform. support --> Apple PoweMac based machines
(2) Device Drivers --> ATA/ATAPI/MFM/RLL support --> CMD64{3|6|8|9} chipset
support
(3) File systems --> Partition Types --> Advanced Partition selection -->
Macintosh partition map support
(4) Device Drivers --> Graphics support --> console display driver support -->
Framebuffer console support
(5) Device Drivers --> Graphics support --> open firmware frame. buffer device
support
(6) Device Drivers --> Macintosh device drivers --> Apple Desktop Bus (ADB)
support  ,  support for CUDA base Macs and PowerMacs  ,  support for ADB input
devices (keyboard, mice, ... )
(7) Device Drivers --> Network device support --> Ethernet ( 10 or 100Mbit )
--> EISA, VLB, PCI and on board controllers --> PCI NE2000 and clones support
(see help)
(8) Device Drivers --> Character devices --> Generic  /dev/rtc emulation

4、向目标机部署CLFS临时系统
（1）参照http://hi.chinaunix.net/index.php?uid-21635276-action-viewspace-itemid-37364，安装powerpc的Debian系统，作为host机，并在host机上安装parted软件包。
（2）准备CLFS系统的虚拟硬盘
qemu-img  create  clfs-ppc-hd.img 2G
（3）将CLFS的构建目录用NFS导出。关于qemu虚拟机与主机的网络连接，可参考http://linuxman.blog.ccidnet.com/blog-htm-do-showone-uid-60710-type-blog-itemid-1472386.html设置。
（4）启动host机，包含CLFS硬盘和NFS支持
qemu-system-ppc  -kernel vmlinux-2.6.26-2-powerpc  -initrd
initrd.img-2.6.26-2-powerpc   -net nic  -net tap -hda debian-ppc-hd.img  -hdb
clfs-ppc-hd.img  -append "root=/dev/hdc3"
（5）在host机上为CLFS虚拟硬盘分区
parted  /dev/hdd
在parted中，首先执行mklabel命令，为硬盘创建Mac机的disklabel。CLFS硬盘分3个区：第一分区，32.8k
，APPLE（已由mklabel命令自动分得）；第二分区，256M，swap；第三分区，全部剩余空间，linux
root分区。分区完毕后，在后两个分区上创建相应的文件系统。
（6）分别挂载CLFS构建目录和CLFS目标硬盘分区（/dev/hdd3），将CLFS构建目录下的全部文件拷贝到CLFS目标硬盘分区。
（7） 确认CLFS目标硬盘中的 /etc/fstab
文件中root分区和swap分区的正确性。按前面的分区，root分区应该是
/dev/hda3，swap分区应该是 /dev/hda2
。注意：CLFS系统中的硬盘号与host机上的硬盘号不一样。

5、CLFS临时系统启动命令
qemu-system-ppc  -kernel vmlinux  -hda clfs-ppc-hd.img -append
"root=/dev/hda3"
这里的 vmlinux是上步配置、编译后得到的Linux内核。
临时系统启动后，按CLFS BOOK的说明继续完成CLFS的构建。

