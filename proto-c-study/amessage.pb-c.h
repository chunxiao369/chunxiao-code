/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_amessage_2eproto__INCLUDED
#define PROTOBUF_C_amessage_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _AMessage AMessage;
typedef struct _StructTest StructTest;
typedef struct _StructTest__Nested2 StructTest__Nested2;


/* --- enums --- */


/* --- messages --- */

struct  _AMessage
{
  ProtobufCMessage base;
  int32_t a;
  protobuf_c_boolean has_b;
  int32_t b;
};
#define AMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&amessage__descriptor) \
    , 0, 0,0 }


struct  _StructTest__Nested2
{
  ProtobufCMessage base;
  int32_t a;
  int32_t b;
};
#define STRUCT_TEST__NESTED2__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&struct_test__nested2__descriptor) \
    , 0, 0 }


struct  _StructTest
{
  ProtobufCMessage base;
  size_t n_nested2;
  StructTest__Nested2 **nested2;
};
#define STRUCT_TEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&struct_test__descriptor) \
    , 0,NULL }


/* AMessage methods */
void   amessage__init
                     (AMessage         *message);
size_t amessage__get_packed_size
                     (const AMessage   *message);
size_t amessage__pack
                     (const AMessage   *message,
                      uint8_t             *out);
size_t amessage__pack_to_buffer
                     (const AMessage   *message,
                      ProtobufCBuffer     *buffer);
AMessage *
       amessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   amessage__free_unpacked
                     (AMessage *message,
                      ProtobufCAllocator *allocator);
/* StructTest__Nested2 methods */
void   struct_test__nested2__init
                     (StructTest__Nested2         *message);
/* StructTest methods */
void   struct_test__init
                     (StructTest         *message);
size_t struct_test__get_packed_size
                     (const StructTest   *message);
size_t struct_test__pack
                     (const StructTest   *message,
                      uint8_t             *out);
size_t struct_test__pack_to_buffer
                     (const StructTest   *message,
                      ProtobufCBuffer     *buffer);
StructTest *
       struct_test__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   struct_test__free_unpacked
                     (StructTest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*AMessage_Closure)
                 (const AMessage *message,
                  void *closure_data);
typedef void (*StructTest__Nested2_Closure)
                 (const StructTest__Nested2 *message,
                  void *closure_data);
typedef void (*StructTest_Closure)
                 (const StructTest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor amessage__descriptor;
extern const ProtobufCMessageDescriptor struct_test__descriptor;
extern const ProtobufCMessageDescriptor struct_test__nested2__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_amessage_2eproto__INCLUDED */
