# 调度方式: 线程的调度是由操作系统决定的，而协程的调度是由程序自己控制的。
#           这意味着协程的切换不需要操作系统的介入，从而可以更精细地控制程序的执行流程。
# 并发性:   线程是并发执行的，即多个线程可以同时运行。相比之下，协程是协作式的，同一时刻只能有一个协程在执行。
#           协程的切换是由协程代码本身决定的，而不是由操作系统强制进行的。
# 资源消耗: 线程的切换需要保存和恢复线程的上下文，这通常需要较多的系统资源。而协程的切换只需要保存和恢复协程的状态，因此资源消耗较小。
# 数据共享: 线程之间共享内存空间，需要使用锁等机制来保护共享数据的一致性。
#           协程则共享同一个进程的地址空间，可以直接共享数据，但需要注意避免竞态条件。
# 编程方式: 使用线程需要面对线程同步、锁等复杂的并发编程问题。
#           而使用协程则可以使用同步编程的方式来实现并发，编程更加简单直观。

# 通过同步的方式执行异步任务
import asyncio
 
async def async_function():
    print("Inside async_function")
    await asyncio.sleep(1)  # 模拟IO操作
    print("Leaving async_function")
 
# 运行异步函数
coroutine = async_function()
 
# 创建事件循环
loop = asyncio.get_event_loop()
loop.run_until_complete(coroutine)
